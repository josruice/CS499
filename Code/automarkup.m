%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%  CS 499 - Senior thesis (Spring 2014)  %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%%% Material dataset classification using SVM.
%
%%% Advisor:   Dr. David Alexander Forsyth  (daf -at- uiuc.edu)
%%% Coadvisor: Dr. Roberto Paredes Palacios (rparedes -at- dsic.upv.es)
%%% Student:       Jose Vicente Ruiz Cepeda (ruizcep2 -at- illinois.edu)
%
% Algorithm outline:
%   1. Get the features of the training images using a feature extraction 
%      method.
%   2. Quantize the feature vectors:
%       - Partition the feature descriptors in clusters using k-means.
%       - Define the image feature vector as an array with size the number of
%         clusters where index i represents the number of image features whose
%         nearest neighbour is cluster i.
%   3. Train one linear classifier per material property using Support Vector
%      Machines (SVM) and the labels of the manual markup.
%   4. Get the features of the test images and quantize them using the clusters
%      of the training data.
%   5. Use the previous linear classifiers to obtain the vector of properties of
%      the test images.
%   6. Train a Naive Bayes classifier and a SVMs with the vector of properties
%      of the training images and use them to classify the vector of properties  
%      of the test images.
%   [... In progress ...]
%

% --------------------------------------------------------------------------- %

%%%%%%%%%%%%%%%%%%
%%%   Script   %%%
%%%%%%%%%%%%%%%%%%

% Load constants.
loadConstants;

% Load constants that specify this execution.
loadControlPanel;

% Load VLFeat library.
run(VLFEAT_LIBRARY_PATH);

% Variables to improve code legibility.
nClasses = length(CLASSES_CELL_ARRAY);
nSamples = sum(NUMBER_OF_SAMPLES_PER_CLASS_ARRAY);

% Read markup file and store the properties in a cell array.
propertiesCellArray = readFeatures(MARKUP_FILE,                              ...
                                   NUMBER_OF_SAMPLES_PER_CLASS_ARRAY);
nProperties = length(propertiesCellArray);

imagePathsCellArray = buildImagesPaths (IMAGES_ROOT_PATH,                    ...
                                        CLASSES_CELL_ARRAY,                  ...
                                        NUMBER_OF_SAMPLES_PER_CLASS_ARRAY);

% Display the file names of the sample images with every property if required.
if VERBOSE >= 2
    for iProperty = 1:nProperties,
        disp(propertiesCellArray{iProperty}{1});
        I = find(propertiesCellArray{iProperty}{2});
        disp(imagePathsCellArray(I));
    end
end

% --------------------------------------------------------------------------- %

disp('Execution data:');
fprintf(STDOUT, [' - Descriptors: %s\n - Num clusters: %d (datatype %s, '    ...
        'hierarchical %d, branching %d)\n - SVM solver: %s (%s loss, '       ...
        'lambda %f)\n\n'], FEATURE_EXTRACTOR, NUM_CLUSTERS, KMEANS_DATATYPE, ...
        KMEANS_HIERARCHICAL, KMEANS_BRANCHING_FACTOR, SOLVER, LOSS, LAMBDA);

% --------------------------------------------------------------------------- %

% Compute the descriptors of all the samples.
fprintf(STDOUT, 'Descriptors: '); tic;
descriptorsCellArray = computeDescriptors(imagePathsCellArray,          ...
    FEATURE_EXTRACTOR_PARAM,         FEATURE_EXTRACTOR,                 ...
    MAX_DESCRIPTORS_PER_IMAGE_PARAM, MAX_DESCRIPTORS_PER_IMAGE); 
fprintf('%d descriptors. ', sum(cellfun(@(x) size(x,2), descriptorsCellArray)));
toc; fprintf(STDOUT, '\n');

% Variables to measure the accuracy.
accuracyBayesTrainedPredictedTestingPredicted = 0;
accuracyBayesTrainedPredictedTestingReal = 0;
accuracyBayesTrainedRealTestingPredicted = 0;
accuracyBayesTrainedRealTestingReal = 0;
accuracySVMTrainedPredictedTestingPredicted = 0;
accuracySVMTrainedPredictedTestingReal = 0;
accuracySVMTrainedRealTestingPredicted = 0;
accuracySVMTrainedRealTestingReal = 0;

%%% Apply Leave One Out Cross-Validation.
nTestedSamples = 0;
for testIndex = 1:12:nSamples,

    %%%
    %%% Training SVMs for properties detection. 
    %%%
    fprintf(STDOUT, 'Testing sample %d. ', testIndex);
    if VERBOSE == 0, tic; end

    % Prepare the training descriptors and the training labels (properties).
    trainingIndices = setdiff(1:nSamples, testIndex);
    trainingPropertiesCellArray = cellfun(    ...
        @(x) {x{1}, x{2}(trainingIndices)},   ...
        propertiesCellArray, 'UniformOutput', false);
    trainingDescriptorsCellArray = descriptorsCellArray(trainingIndices);
    
    % Quantize the feature descriptors using k-means.
    if VERBOSE >= 1, fprintf(STDOUT, '\n - Kmeans: '); tic; end
    [quantizedTrainDescriptorsCellArray, clusterCenterMatrix, nClusters] =      ...
    quantizeVectors (trainingDescriptorsCellArray, NUM_CLUSTERS,                ...
        KMEANS_DATATYPE_PARAM,          KMEANS_DATATYPE,                        ...
        KMEANS_HIERARCHICAL_PARAM,      KMEANS_HIERARCHICAL,                    ...
        KMEANS_BRANCHING_FACTOR_PARAM,  KMEANS_BRANCHING_FACTOR);
    if VERBOSE >= 1, fprintf('%d clusters. ', nClusters); toc; end

    % Use SVM to create the linear clasifiers for the properties.
    % SVM cell structure: 'scale-feature', weight vector (W), bias (B).
    if VERBOSE >= 1, fprintf(STDOUT, ' - SVMs: '); tic; end
    [estimatedTrainPropertiesCellArray, propertiesSvmsCellArray] =          ...
    svm (quantizedTrainDescriptorsCellArray, trainingPropertiesCellArray,   ...
        TRAINING_MODALITY,                                                  ...
        LAMBDA_PARAM,  LAMBDA,                                              ...
        SOLVER_PARAM,  SOLVER,                                              ...
        LOSS_PARAM,    LOSS,                                                ...
        VERBOSE_PARAM, VERBOSE);
    if VERBOSE >= 1, toc; end

    %%%
    %%% Testing SVMs for properties detection.
    %%%

    % Prepare the test descriptors and the test labels (properties).
    testPropertiesCellArray = cellfun(      ...
        @(x) {x{1}, x{2}(testIndex)},       ...
        propertiesCellArray, 'UniformOutput', false);
    testDescriptorsCellArray = descriptorsCellArray(testIndex);

    % Quantize the feature descriptors using k-means.
    if VERBOSE >= 1, fprintf(STDOUT, '\n - Kmeans: '); tic; end
    quantizedTestDescriptorsCellArray = quantizeVectors (           ...
        testDescriptorsCellArray,       nClusters,                  ...
        CLUSTERS_CENTERS_PARAM,         clusterCenterMatrix,        ...
        KMEANS_DATATYPE_PARAM,          KMEANS_DATATYPE,            ...
        KMEANS_HIERARCHICAL_PARAM,      KMEANS_HIERARCHICAL,        ...
        KMEANS_BRANCHING_FACTOR_PARAM,  KMEANS_BRANCHING_FACTOR);
    if VERBOSE >= 1, toc; end

    % Use the previously created SVMs with the training data to estimate the 
    % vectors of properties of the test images.
    if VERBOSE >= 1, fprintf(STDOUT, ' - SVMs: '); tic; end
    estimatedTestPropertiesCellArray =                                  ...
    svm (quantizedTestDescriptorsCellArray, testPropertiesCellArray,    ...
        TESTING_MODALITY,                                               ...
        SVMS_PARAM,    propertiesSvmsCellArray,                         ...
        VERBOSE_PARAM, VERBOSE);
    if VERBOSE >= 1, toc; end

    % ----------------------------------------------------------------------- %

    % Build matrices, arrays and cell arrays with real material labels, real 
    % properties and estimated properties both from training and testing.
    nextSamplePosition = 1;
    realMaterialLabelsArray = zeros(nSamples, 1);
    realMaterialLabelsCellArray = cell(nClasses, 1);
    for iClass = 1:nClasses,
        nClassSamples = NUMBER_OF_SAMPLES_PER_CLASS_ARRAY(iClass);
        lastSamplePosition = (nextSamplePosition+nClassSamples)-1;

        binaryMaterialLabelsArray = zeros(nSamples, 1);
        binaryMaterialLabelsArray(nextSamplePosition:lastSamplePosition) = 1;

        realMaterialLabelsArray(nextSamplePosition:lastSamplePosition) = iClass;
        realMaterialLabelsCellArray{iClass} = {CLASSES_CELL_ARRAY{iClass}, ...
                                               binaryMaterialLabelsArray};

        nextSamplePosition = lastSamplePosition+1;
    end
    realTrainMaterialLabelsArray = realMaterialLabelsArray(trainingIndices);
    realTrainMaterialLabelsCellArray = cellfun(   ...
            @(x) {x{1}, x{2}(trainingIndices)},   ...
            realMaterialLabelsCellArray, 'UniformOutput', false);
    realTestMaterialLabelsArray = realMaterialLabelsArray(testIndex);
    realTestMaterialLabelsCellArray = cellfun(    ...
            @(x) {x{1}, x{2}(testIndex)},         ...
            realMaterialLabelsCellArray, 'UniformOutput', false);
    nTrainSamplesPerClassArray = accumarray(realTrainMaterialLabelsArray, ...
                                            1, [nClasses,1]);
    nTestSamplesPerClassArray = accumarray(realTestMaterialLabelsArray, ...
                                           1, [nClasses,1]);

    realPropertiesMatrix = extractFromCell(propertiesCellArray, 2);
    realPropertiesCellArray = mat2cell(realPropertiesMatrix', ...
                                       nProperties, ones(nSamples,1))';

    realTrainPropertiesMatrix = realPropertiesMatrix(trainingIndices,:);
    realTrainPropertiesCellArray = realPropertiesCellArray(trainingIndices,:);
    realTestPropertiesMatrix = realPropertiesMatrix(testIndex,:);
    realTestPropertiesCellArray = realPropertiesCellArray(testIndex,:);

    estimatedTrainPropertiesMatrix = cell2mat(cellfun(@(x) x',              ...
                                        estimatedTrainPropertiesCellArray,  ...
                                             'UniformOutput', false));
    estimatedTestPropertiesMatrix = cell2mat(cellfun(@(x) x',               ...
                                        estimatedTestPropertiesCellArray,   ...
                                             'UniformOutput', false));
   
    % ----------------------------------------------------------------------- %

    %%%
    %%% Train and test Naive Bayes for material labeling trained with predicted 
    %%% data.
    %%%
    if VERBOSE >= 1
        fprintf(STDOUT, '\nNaive Bayes trained with predicted data:\n');
        fprintf(STDOUT, '[TRAINING] ');
    end
    [~, estimatedBayesClassifier] = naiveBayes (                            ...
                                        estimatedTrainPropertiesMatrix,     ...
                                        realTrainMaterialLabelsArray,       ...
                                        nTrainSamplesPerClassArray,         ...
                                        TRAINING_MODALITY,                  ...
                                        VERBOSE_PARAM, VERBOSE);

    if VERBOSE >= 1, fprintf(STDOUT, '[TESTING - Predicted data] '); end
    [estimatedMaterialLabelsArray, ~, confusionMatrix] =                    ...
        naiveBayes (estimatedTestPropertiesMatrix,                          ...
                   realTestMaterialLabelsArray,                             ...
                   nTestSamplesPerClassArray,                               ...
                   TESTING_MODALITY,                                        ...
                   BAYES_CLASSIFIER_PARAM, estimatedBayesClassifier,        ...
                   VERBOSE_PARAM, VERBOSE);
    accuracyBayesTrainedPredictedTestingPredicted =         ...
        accuracyBayesTrainedPredictedTestingPredicted +     ...
        sum(estimatedMaterialLabelsArray == realTestMaterialLabelsArray);

    if VERBOSE >= 1, fprintf(STDOUT, '[TESTING - Ground truth data] '); end
    [estimatedMaterialLabelsArray, ~, confusionMatrix] =                    ...
        naiveBayes (realTestPropertiesMatrix,                               ...
                   realTestMaterialLabelsArray,                             ...
                   nTestSamplesPerClassArray,                               ...
                   TESTING_MODALITY,                                        ...
                   BAYES_CLASSIFIER_PARAM, estimatedBayesClassifier,        ...
                   VERBOSE_PARAM, VERBOSE);
    accuracyBayesTrainedPredictedTestingReal =         ...
        accuracyBayesTrainedPredictedTestingReal +     ...
        sum(estimatedMaterialLabelsArray == realTestMaterialLabelsArray);

    %%%
    %%% Train and test Naive Bayes for material labeling trained with ground 
    %%% truth data.
    %%%
    if VERBOSE >= 1
        fprintf(STDOUT, '\nNaive Bayes trained with ground truth data:\n');
        fprintf(STDOUT, '[TRAINING] ');
    end
    [~, realBayesClassifier] = naiveBayes (realTrainPropertiesMatrix,       ...
                                           realTrainMaterialLabelsArray,    ...
                                           nTrainSamplesPerClassArray,      ...
                                           TRAINING_MODALITY,               ...
                                           VERBOSE_PARAM, VERBOSE);

    if VERBOSE >= 1, fprintf(STDOUT, '[TESTING - Predicted data] '); end
    [estimatedMaterialLabelsArray, ~, confusionMatrix] =                    ...
        naiveBayes (estimatedTestPropertiesMatrix,                          ...
                   realTestMaterialLabelsArray,                             ...
                   nTestSamplesPerClassArray,                               ...
                   TESTING_MODALITY,                                        ...
                   BAYES_CLASSIFIER_PARAM, realBayesClassifier,             ...
                   VERBOSE_PARAM, VERBOSE);
    accuracyBayesTrainedRealTestingPredicted =         ...
        accuracyBayesTrainedRealTestingPredicted +     ...
        sum(estimatedMaterialLabelsArray == realTestMaterialLabelsArray);

    if VERBOSE >= 1, fprintf(STDOUT, '[TESTING - Ground truth data] '); end
    [estimatedMaterialLabelsArray, ~, confusionMatrix] =                    ...
        naiveBayes (realTestPropertiesMatrix,                               ...
                   realTestMaterialLabelsArray,                             ...
                   nTestSamplesPerClassArray,                               ...
                   TESTING_MODALITY,                                        ...
                   BAYES_CLASSIFIER_PARAM, realBayesClassifier,             ...
                   VERBOSE_PARAM, VERBOSE);
    accuracyBayesTrainedRealTestingReal =         ...
        accuracyBayesTrainedRealTestingReal +     ...
        sum(estimatedMaterialLabelsArray == realTestMaterialLabelsArray);

    % ----------------------------------------------------------------------- %

    %%%
    %%% Train and test (one vs. all) SVMs for material labeling trained with 
    %%% estimated data.
    %%%
    if VERBOSE >= 1
        fprintf(STDOUT, '\nSVMs trained with predicted data:\n');
        fprintf(STDOUT, '[TRAINING] ');
    end
    [~, estimatedMaterialsSvmsCellArray] =                                  ...
    svm (estimatedTrainPropertiesCellArray,                                 ...
        realTrainMaterialLabelsCellArray,                                   ...
        TRAINING_MODALITY,                                                  ...
        LAMBDA_PARAM,  LAMBDA,                                              ...
        SOLVER_PARAM,  SOLVER,                                              ...
        LOSS_PARAM,    LOSS,                                                ...
        VERBOSE_PARAM, VERBOSE);

    %% Predicted data.
    if VERBOSE >= 1, fprintf(STDOUT, '\n[TESTING - Predicted data] '); end
    [estimatedMaterialLabelsArray, confusionMatrix] =                        ...
        svmOneVsAll (estimatedMaterialsSvmsCellArray,                        ...
                     estimatedTestPropertiesMatrix,                          ...
                     realTestMaterialLabelsArray, nTestSamplesPerClassArray, ...
                     VERBOSE_PARAM, VERBOSE);
    accuracySVMTrainedPredictedTestingPredicted =         ...
        accuracySVMTrainedPredictedTestingPredicted +     ...
        sum(estimatedMaterialLabelsArray == realTestMaterialLabelsArray);

    %% Ground truth data.
    if VERBOSE >= 1, fprintf(STDOUT, '[TESTING - Ground truth data] '); end
    [estimatedMaterialLabelsArray, confusionMatrix] =                        ...
        svmOneVsAll (estimatedMaterialsSvmsCellArray,                        ...
                     realTestPropertiesMatrix,                               ...
                     realTestMaterialLabelsArray, nTestSamplesPerClassArray, ...
                     VERBOSE_PARAM, VERBOSE);
    accuracySVMTrainedPredictedTestingReal =         ...
        accuracySVMTrainedPredictedTestingReal +     ...
        sum(estimatedMaterialLabelsArray == realTestMaterialLabelsArray);

    %%%
    %%% Train and test SVMs (one vs. all) for material labeling trained with 
    %%% ground truth data.
    %%%
    if VERBOSE >= 1
        fprintf(STDOUT, '\nSVMs trained with ground truth data:\n');
        fprintf(STDOUT, '[TRAINING] ');
    end
    [~, realMaterialsSvmsCellArray] =                                       ...
    svm (realTrainPropertiesCellArray,                                      ...
        realTrainMaterialLabelsCellArray,                                   ...
        TRAINING_MODALITY,                                                  ...
        LAMBDA_PARAM,  LAMBDA,                                              ...
        SOLVER_PARAM,  SOLVER,                                              ...
        LOSS_PARAM,    LOSS,                                                ...
        VERBOSE_PARAM, VERBOSE);

    %% Predicted data.
    if VERBOSE >= 1, fprintf(STDOUT, '\n[TESTING - Predicted data] '); end
    [estimatedMaterialLabelsArray, confusionMatrix] =                        ...
        svmOneVsAll (realMaterialsSvmsCellArray,                             ...
                     estimatedTestPropertiesMatrix,                          ...
                     realTestMaterialLabelsArray, nTestSamplesPerClassArray, ...
                     VERBOSE_PARAM, VERBOSE);
    accuracySVMTrainedRealTestingPredicted =         ...
            accuracySVMTrainedRealTestingPredicted +     ...
            sum(estimatedMaterialLabelsArray == realTestMaterialLabelsArray);

    %% Ground truth data.
    if VERBOSE >= 1, fprintf(STDOUT, '[TESTING - Ground truth data] '); end
    [estimatedMaterialLabelsArray, confusionMatrix] =                        ...
        svmOneVsAll (realMaterialsSvmsCellArray,                             ...
                     realTestPropertiesMatrix,                               ...
                     realTestMaterialLabelsArray, nTestSamplesPerClassArray, ...
                     VERBOSE_PARAM, VERBOSE);
    accuracySVMTrainedRealTestingReal =         ...
            accuracySVMTrainedRealTestingReal +     ...
            sum(estimatedMaterialLabelsArray == realTestMaterialLabelsArray);

    % ----------------------------------------------------------------------- %
    
    nTestedSamples = nTestedSamples+length(testIndex);

    if VERBOSE == 0, toc; 
    else fprintf(STDOUT, '\n'); 
    end
end

fprintf(STDOUT, '\nACCURACY RESULTS: \n');
fprintf(STDOUT, ['%d out of %d (%.2f %%) - Naive Bayes trained with '       ...
                 'predicted data and tested with predicted data.\n'],       ...
                 accuracyBayesTrainedPredictedTestingPredicted,             ...
                 nTestedSamples,                                            ...
                 accuracyBayesTrainedPredictedTestingPredicted*100/         ...
                 nTestedSamples);
fprintf(STDOUT, ['%d out of %d (%.2f %%) - Naive Bayes trained with '       ...
                 'predicted data and tested with real data.\n'],            ...
                 accuracyBayesTrainedPredictedTestingReal,                  ...
                 nTestedSamples,                                            ...
                 accuracyBayesTrainedPredictedTestingReal*100/              ...
                 nTestedSamples);
fprintf(STDOUT, ['%d out of %d (%.2f %%) - Naive Bayes trained with '       ...
                 'real data and tested with predicted data.\n'],            ...
                 accuracyBayesTrainedRealTestingPredicted,                  ...
                 nTestedSamples,                                            ...
                 accuracyBayesTrainedRealTestingPredicted*100/              ...
                 nTestedSamples);
fprintf(STDOUT, ['%d out of %d (%.2f %%) - Naive Bayes trained with '       ...
                 'real data and tested with real data.\n'],                 ...
                 accuracyBayesTrainedRealTestingReal,                       ...
                 nTestedSamples,                                            ...
                 accuracyBayesTrainedRealTestingReal*100/                   ...
                 nTestedSamples);

fprintf(STDOUT, ['%d out of %d (%.2f %%) - SVMS trained with '              ...
                 'predicted data and tested with predicted data.\n'],       ...
                 accuracySVMTrainedPredictedTestingPredicted,               ...
                 nTestedSamples,                                            ...
                 accuracySVMTrainedPredictedTestingPredicted*100/           ...
                 nTestedSamples);
fprintf(STDOUT, ['%d out of %d (%.2f %%) - SVMS trained with '              ...
                 'predicted data and tested with real data.\n'],            ...
                 accuracySVMTrainedPredictedTestingReal,                    ...
                 nTestedSamples,                                            ...
                 accuracySVMTrainedPredictedTestingReal*100/                ...
                 nTestedSamples);
fprintf(STDOUT, ['%d out of %d (%.2f %%) - SVMS trained with '              ...
                 'real data and tested with predicted data.\n'],            ...
                 accuracySVMTrainedRealTestingPredicted,                    ...
                 nTestedSamples,                                            ...
                 accuracySVMTrainedRealTestingPredicted*100/                ...
                 nTestedSamples);
fprintf(STDOUT, ['%d out of %d (%.2f %%) - SVMS trained with '              ...
                 'real data and tested with real data.\n'],                 ...
                 accuracySVMTrainedRealTestingReal,                         ...
                 nTestedSamples,                                            ...
                 accuracySVMTrainedRealTestingReal*100/                     ...
                 nTestedSamples);
fprintf(STDOUT, '\n');
% --------------------------------------------------------------------------- %
